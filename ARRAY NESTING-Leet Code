//Time complexity- O(N) ,  Space complexity- O(N)

class Solution {
    public int arrayNesting(int[] nums) {
       HashSet<Integer> hs=new HashSet();
        int i,count,j,max=0;
        for(i=0;i<nums.length;i++)
        {
            if(!hs.contains(i))
            {
                j=i;
                count=0;
                while(!hs.contains(j))
                {
                    hs.add(j);
                    j=nums[j];
                    count++;
                }
                if(count>max)
                    max=count;
            }
        }
        return max;
    }
}

Time Complexity- O(N)  ,  Space complexity-  O(1)

class Solution {
    public int arrayNesting(int[] nums) {
       int max=Integer.MIN_VALUE;
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]<0)
                continue;
            max=Math.max(max,calclen(nums,i));
        }
        return max;
    }
    
    private int calclen(int nums[],int i)
    {
        if(i<0||i>nums.length||nums[i]<0)
            return 0;
        
        int next= nums[i];
        nums[i]=Integer.MIN_VALUE;
        return 1+calclen(nums,next);
    }
}
