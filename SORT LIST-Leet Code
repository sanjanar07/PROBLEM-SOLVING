class Solution {
    public ListNode sortList(ListNode head) {
        if(head==null || head.next==null)
        {
            return head;
        }
        ListNode tail=head;
       ListNode slow=head;
        ListNode fast=head;
        while(fast!=null&&fast.next!=null)
        {
            tail=slow;
            slow=slow.next;
            fast=fast.next.next;
            
        }
        tail.next=null;
        ListNode left=sortList(head);
        ListNode right=sortList(slow);
        return merge(left,right);
    }
   ListNode merge(ListNode left,ListNode right)
   {
       ListNode merged=new ListNode(0);
       ListNode curr_node=merged;
       while(left!=null&&right!=null)
       {
           if(left.val<right.val)
           {
               curr_node.next=left;
                   left=left.next;
           }
           else
           {
               curr_node.next=right;
               right=right.next;
           }
           curr_node=curr_node.next;
           if(left!=null)
           {
               curr_node.next = left; 
           }
           else
           {
               curr_node.next = right;
           }
       }
       return merged.next;   
   }
}
