/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* twoSum(int* nums, int numsSize, int target, int* returnSize)
{
    int flag=0;
    int *array=(int*)malloc(sizeof(int)*(2));
    for(int i=0;i<numsSize-1;i++)
    {
        for(int j=i+1;j<numsSize;j++)
        {
          if((nums[i]+nums[j])==target)
          {
            *array=i;
            *(array+1)=j;
            *returnSize=2;
            flag=1;
           }
          if(flag==1)
             break;
        }
    }
    return array;
    free(array);
}


/*OPTIMISZED SOLUTION

class Solution 
{
public:

    vector<int> twoSum(vector<int>& nums, int target) 
    {
      unordered_map<int, int> indices;
        for (int i = 0; i < nums.size(); i++) {
            if (indices.find(target - nums[i]) != indices.end()) {
                return {indices[target - nums[i]], i};
            }
            indices[nums[i]] = i;
        }
        return {};
    }
};
*/
